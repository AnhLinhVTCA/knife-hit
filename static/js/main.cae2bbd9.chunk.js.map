{"version":3,"sources":["utils/createScreen.js","utils/coordUtil.js","createWorld.js","GameOverScreen.js","renderRewardScreen.js","system/BgRenderSystem.js","system/KnifeRenderSystem.js","system/GoalRenderSystem.js","system/TotalKnifeRenderSystem.js","system/processSpinOption.js","system/GoalSpinSystem.js","system/GoalDropRenderSystem.js","system/GoalDropPositionSystem.js","system/KnifePositionSystem.js","system/VibrateGoalRenderSystem.js","system/VibrateGoalPositionSystem.js","system/EffectHitSystem.js","system/KnifeHitRenderSystem.js","system/KnifeDropSystem.js","system/KnifeDropRenderSystem.js","GameScreen.js","StartScreen.js","index.js"],"names":["noop","createScreen","update","detroy","checkPointInsideRect","vector2","verts","x","y","minX","maxX","minY","maxY","worldState","extra","systems","passiveSystems","addSystem","system","passive","init","push","delta","runPassive","createRenderGameOverScreen","Game","goToPlayScreen","a","createRenderPlayScreen","setCurrentScreen","goToStartScreen","createRenderChoosingScreen","worldWidth","worldHeight","assets","canvas","batch","viewport","camera","inputHandler","createViewportAwareInputHandler","atlas","window","bgGameOver","findRegion","BG_HEIGHT","BG_WIDTH","restart_btn","RESTART_BTN_RECT","RESTART_BTN_WIDTH","touchXY","Vector2","addEventListener","getTouchedWorldCoord","setProjection","combined","begin","draw","end","cleanup","createRenderRewardScreen","endgame","createBgRenderSystem","backGround","knifeIndex","worldheight","setColor","createKnifeRenderSystem","knife","knifes","findRegions","knifeState","position","width","height","createGoalRenderSystem","goal","goalWhite","goalState","vibrateGoal","optionGame","indexOptionGame","knifeHit","length","countShotting","radius","angle","createTotalKnifeRenderSystem","totalKnife","totalKnifeState","i","goalKnife","goalAngle","targetSpeed","Math","PI","goalSpeed","checkDirectionSpin","accumulate","accumulate_2","accumulate_3","swept","speedSpin","SPEED_CHANGE_INTERVAL","randomSpin","reverse","sweptWithRhythm","reverseWithRhythm","random","sweptWithReverse","speed","createGoalSpinSystem","option","redundantAngle","tmp","processSpinOption","k","rotateAngle","set","rotateRad","tmp2","addVector","tmp3","leftcheck","rightcheck","createGoalDropRenderSystem","listGoalDrop","goalDrop","checkRenderGoalDrop","createGoalDropPositionSystem","index","opacity","createKnifePositionSystem","isShooting","checkKnifeGoal","bullets","checkKnifeDrop","speedY","velocity","lifeSpan","expire","score","createVibrateGoalRenderSystem","bullet","createVibrateGoalPositionSystem","timeSpan","currentPositionGoal","createEffectHitSystem","setVector","scale","splice","createKnifeHitRenderSystem","drawLine","thickness","r","g","b","distance","subVector","createKnifeDropSystem","currentPosKnife","knifeDrop","rotate","gameOver","createKnifeDropRenderSystem","gl","whiteTex","win","apple","floor","world","createWorld","goToGameOverScreen","goToRewardScreen","delayStateTime","stateTime","maxX2","minX2","bg","select_knife_btn","start_btn","SELECT_KNIFE_BTN_RECT","SELECT_KNIFE_BTN_WIDTH","START_BTN_RECT","START_BTN_WIDTH","listKnife","posX","posX2","statusListKnife","document","getElementById","info","createViewport","getContext","getCamera","createBatch","createWhiteTex","screen","currentScreen","loadTexture","loadingScreen","L_WIDTH","L_HEIGHT","count","fillRect","ratio","doAndCount","prosime","then","result","Promise","all","loadAtlas","clearColor","clear","COLOR_BUFFER_BIT","game","createGameLoop","setInterval","innerHTML","getFps"],"mappings":"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","file":"static/js/main.cae2bbd9.chunk.js","sourcesContent":["const noop = () => {};\n\nconst createScreen = ({ update = noop, detroy = noop }) => {\n  return { update, detroy };\n};\n\nexport default createScreen;\n","export const checkPointInsideRect = (vector2, verts) => {\n  const x = vector2.x;\n  const y = vector2.y;\n\n  const minX = verts[0];\n  const maxX = verts[0] + verts[2];\n  const minY = verts[1];\n  const maxY = verts[1] + verts[3];\n  if (x < minX || x > maxX || y < minY || y > maxY) return false;\n  return true;\n};\n","export default (worldState, extra) => {\n  const systems = [];\n  const passiveSystems = [];\n  return {\n    addSystem(system, passive = false) {\n      system.init && system.init(worldState, extra);\n      if (passive) {\n        passiveSystems.push(system);\n      } else {\n        systems.push(system);\n      }\n    },\n    update(delta, runPassive = true) {\n      for (let system of systems) {\n        system.update(delta, worldState, extra);\n      }\n      if (runPassive) {\n        for (let system of passiveSystems) {\n          system.update(delta, worldState, extra);\n        }\n      }\n    },\n  };\n};\n","import createScreen from \"./utils/createScreen\";\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\nimport { checkPointInsideRect } from \"./utils/coordUtil\";\nimport { createRenderChoosingScreen } from \"./StartScreen\";\nimport createRenderPlayScreen from \"./GameScreen\";\n\nexport const createRenderGameOverScreen = (Game) => {\n  const goToPlayScreen = async () =>\n    Game.setCurrentScreen(await createRenderPlayScreen(Game));\n  const goToStartScreen = async () =>\n    Game.setCurrentScreen(await createRenderChoosingScreen(Game));\n  const {\n    worldWidth,\n    worldHeight,\n    assets,\n    canvas,\n    batch,\n    viewport,\n    camera,\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const atlas = assets.atlas;\n  window.atlas = atlas;\n  const bgGameOver = atlas.findRegion(\"gameover\", -1);\n  const BG_HEIGHT = worldHeight;\n  const BG_WIDTH = worldWidth;\n  // const select_knife_btn = atlas.findRegion(\"select-knife-btn\", -1);\n  // const SELECT_KNIFE_BTN_WIDTH = 6;\n  // const SELECT_KNIFE_BTN_HEIGHT = 5;\n  const restart_btn = atlas.findRegion(\"restart-btn\", -1);\n  const RESTART_BTN_WIDTH = 14;\n  const RESTART_BTN_HEIGHT = 7;\n  // const SELECT_KNIFE_BTN_RECT = [\n  //   worldWidth / 2 - SELECT_KNIFE_BTN_WIDTH / 2,\n  //   (worldHeight * 5) / 6,\n  //   SELECT_KNIFE_BTN_WIDTH,\n  //   SELECT_KNIFE_BTN_HEIGHT,\n  // ];\n  const RESTART_BTN_RECT = [\n    worldWidth / 2 - RESTART_BTN_WIDTH / 2,\n    (worldHeight * 2) / 3,\n    RESTART_BTN_WIDTH,\n    RESTART_BTN_HEIGHT,\n  ];\n  // const listKnife = atlas.findRegions(\n  //   \"95852d40-981a-48e5-bf16-1d7246f3963f_scaled\"\n  // );\n  // let knifeIndex = 0;\n  // let posX = worldWidth / 5;\n  // let posX2 = worldWidth / 6;\n  // let maxX;\n  // let maxX2;\n  // let minX;\n  // let minX2;\n  let statusListKnife = false;\n  let touchXY = new Vector2(0, 0);\n  inputHandler.addEventListener(\"touchStart\", () => {\n    touchXY = inputHandler.getTouchedWorldCoord();\n    // if (checkPointInsideRect(touchXY, SELECT_KNIFE_BTN_RECT)) {\n    //   statusListKnife ? (statusListKnife = false) : (statusListKnife = true);\n    // }\n    if (\n      checkPointInsideRect(touchXY, RESTART_BTN_RECT) &&\n      statusListKnife === false\n    ) {\n      goToPlayScreen();\n    }\n    if (touchXY.x >= 0 && touchXY.x <= 13 && touchXY.y >= 0 && touchXY.y <= 6) {\n      goToStartScreen();\n    }\n    // if (statusListKnife) {\n    //   minX = worldWidth / 5 + worldWidth / 10;\n    //   maxX = worldWidth / 5 + worldWidth / 10 + worldWidth / 14;\n    //   minX2 = worldWidth / 6 + worldWidth / 10;\n    //   maxX2 = worldWidth / 6 + worldWidth / 10 + worldWidth / 14;\n    //   for (let i = 0; i < listKnife.length; i++) {\n    //     if (\n    //       i < 4 &&\n    //       touchXY.x >= minX &&\n    //       touchXY.x <= maxX &&\n    //       touchXY.y >= worldHeight / 2 - worldHeight / 8 &&\n    //       touchXY.y <= worldHeight / 2 - worldHeight / 8 + worldHeight / 8\n    //     ) {\n    //       Game.knifeIndex = knifeIndex = i;\n    //       statusListKnife = false;\n    //       break;\n    //     } else if (\n    //       i < 5 &&\n    //       touchXY.x >= minX2 &&\n    //       touchXY.x <= maxX2 &&\n    //       touchXY.y >= worldHeight / 2 + worldHeight / 18 &&\n    //       touchXY.y <= worldHeight / 2 + worldHeight / 18 + worldHeight / 8\n    //     ) {\n    //       Game.knifeIndex = knifeIndex = i + 4;\n    //       statusListKnife = false;\n    //       break;\n    //     }\n    //     maxX += worldWidth / 10;\n    //     minX += worldWidth / 10;\n    //     maxX2 += worldWidth / 10;\n    //     minX2 += worldWidth / 10;\n    //   }\n    // }\n  });\n\n  return createScreen({\n    update(delta) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      bgGameOver.draw(\n        batch,\n        worldWidth / 2 - BG_WIDTH / 2,\n        worldHeight / 2 - BG_HEIGHT / 2,\n        BG_WIDTH,\n        BG_HEIGHT\n      );\n      // select_knife_btn.draw(\n      //   batch,\n      //   worldWidth / 2 - SELECT_KNIFE_BTN_WIDTH / 2,\n      //   (worldHeight * 5) / 6,\n      //   SELECT_KNIFE_BTN_WIDTH,\n      //   SELECT_KNIFE_BTN_HEIGHT\n      // );\n\n      // if (statusListKnife) {\n      //   posX = worldWidth / 5;\n      //   posX2 = worldWidth / 6;\n      //   for (let i = 0; i < listKnife.length; i++) {\n      //     const knife = listKnife[i];\n      //     if (i < 4) {\n      //       knife.draw(\n      //         batch,\n      //         (posX += worldWidth / 10),\n      //         worldHeight / 2 - worldHeight / 8,\n      //         worldWidth / 14,\n      //         worldHeight / 8\n      //       );\n      //     } else {\n      //       knife.draw(\n      //         batch,\n      //         (posX2 += worldWidth / 10),\n      //         worldHeight / 2 + worldHeight / 18,\n      //         worldWidth / 14,\n      //         worldHeight / 8\n      //       );\n      //     }\n      //   }\n      // } else {\n      restart_btn.draw(\n        batch,\n        worldWidth / 2 - RESTART_BTN_WIDTH / 2,\n        (worldHeight * 2) / 3,\n        RESTART_BTN_WIDTH,\n        RESTART_BTN_HEIGHT\n      );\n      //   listKnife[knifeIndex].draw(\n      //     batch,\n      //     worldWidth / 2 - 1.5,\n      //     worldHeight / 2 - 2.5,\n      //     worldWidth / 14,\n      //     worldHeight / 8\n      //   );\n      // }\n      batch.end();\n    },\n    detroy() {\n      inputHandler.cleanup();\n    },\n  });\n};\n","import createScreen from \"./utils/createScreen\";\nimport { createViewportAwareInputHandler } from \"gdxjs\";\n\nexport const createRenderRewardScreen = (Game) => {\n  const {\n    worldWidth,\n    worldHeight,\n    canvas,\n    batch,\n    viewport,\n    camera,\n    assets,\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const endgame = assets.endgame;\n  const BG_HEIGHT = worldHeight;\n  const BG_WIDTH = worldWidth;\n\n  return createScreen({\n    update(delta) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.draw(\n        endgame,\n        worldWidth / 2 - BG_WIDTH / 2,\n        worldHeight / 2 - BG_HEIGHT / 2,\n        BG_WIDTH,\n        BG_HEIGHT\n      );\n      batch.end();\n    },\n    detroy() {\n      inputHandler.cleanup();\n    },\n  });\n};\n","export const createBgRenderSystem = () => {\n  let backGround;\n  return {\n    init({ knifeIndex }, { assets }) {\n      const atlas = assets.atlas;\n      backGround = atlas.findRegion(\"background\", -1);\n    },\n    update(delta, worldState, { batch, worldWidth, worldheight, camera }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      batch.setColor(1, 1, 1, 1);\n      backGround.draw(batch, 0, 0, worldWidth, worldheight);\n      batch.end();\n    },\n  };\n};\n","export const createKnifeRenderSystem = () => {\n  let knife;\n  return {\n    init({ knifeIndex }, { assets }) {\n      const atlas = assets.atlas;\n      const knifes = atlas.findRegions(\n        \"95852d40-981a-48e5-bf16-1d7246f3963f_scaled\"\n      );\n      knife = knifes[knifeIndex];\n    },\n    update(delta, { knifeState }, { batch, camera }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      knife.draw(\n        batch,\n        knifeState.position.x - knifeState.width / 2,\n        knifeState.position.y - knifeState.height / 2,\n        knifeState.width,\n        knifeState.height\n      );\n      batch.end();\n    },\n  };\n};\n","export const createGoalRenderSystem = () => {\n  let goal;\n  let goalWhite;\n  return {\n    init({ knifeIndex }, { assets }) {\n      const atlas = assets.atlas;\n      goal = atlas.findRegion(\"Goal\", -1);\n      goalWhite = atlas.findRegion(\"GoalWhite\", -1);\n    },\n    update(\n      delta,\n      { goalState, vibrateGoal, optionGame, indexOptionGame, knifeHit },\n      { batch, camera }\n    ) {\n      if (knifeHit.length < optionGame[indexOptionGame].countShotting) {\n        batch.setProjection(camera.combined);\n        batch.begin();\n        goal.draw(\n          batch,\n          goalState.position.x - goalState.radius / 2,\n          goalState.position.y - goalState.radius / 2,\n          goalState.radius,\n          goalState.radius,\n          goalState.radius / 2,\n          goalState.radius / 2,\n          goalState.angle\n        );\n        if (vibrateGoal) {\n          batch.setColor(1, 1, 1, 0.5);\n          goalWhite.draw(\n            batch,\n            goalState.position.x - goalState.radius / 2,\n            goalState.position.y - goalState.radius / 2,\n            goalState.radius,\n            goalState.radius\n          );\n          batch.setColor(1, 1, 1, 1);\n        }\n        batch.end();\n      }\n    },\n  };\n};\n","export const createTotalKnifeRenderSystem = () => {\n  let totalKnife;\n  let y;\n  return {\n    init({ knifeIndex }, { assets }) {\n      const atlas = assets.atlas;\n      const knifes = atlas.findRegions(\n        \"95852d40-981a-48e5-bf16-1d7246f3963f_scaled\"\n      );\n      totalKnife = knifes[knifeIndex];\n    },\n    update(\n      delta,\n      { totalKnifeState, optionGame, indexOptionGame, knifeHit },\n      { batch, camera, worldWidth }\n    ) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      y = totalKnifeState.position.y;\n      batch.setColor(0, 0, 0, 1);\n      for (\n        let i = 0;\n        i <\n        optionGame[indexOptionGame].countShotting -\n          optionGame[indexOptionGame].goalKnife;\n        i++\n      ) {\n        totalKnife.draw(\n          batch,\n          totalKnifeState.position.x - 1.25,\n          y,\n          2.5,\n          7.5,\n          1.25,\n          3.75,\n          totalKnifeState.angle\n        );\n        y -= worldWidth / 12;\n      }\n      y = totalKnifeState.position.y;\n      batch.setColor(1, 1, 1, 1);\n      for (\n        let i = 0;\n        i < optionGame[indexOptionGame].countShotting - knifeHit.length;\n        i++\n      ) {\n        totalKnife.draw(\n          batch,\n          totalKnifeState.position.x - 1.25,\n          y,\n          2.5,\n          7.5,\n          1.25,\n          3.75,\n          totalKnifeState.angle\n        );\n        y -= worldWidth / 12;\n      }\n      batch.end();\n    },\n  };\n};\n","let goalAngle = 0;\nlet targetSpeed = Math.PI;\nlet goalSpeed = Math.PI;\nlet checkDirectionSpin = true;\nlet accumulate = 0;\nlet accumulate_2 = 0;\nlet accumulate_3 = 0;\nconst swept = speedSpin => {\n  targetSpeed = speedSpin;\n};\nconst reverse = speedSpin => {\n  targetSpeed = -speedSpin;\n};\nconst SPEED_CHANGE_INTERVAL_RHYTHM = 0.7;\nconst SPEED_CHANGE_INTERVAL_RHYTHM_2 = 2;\nconst SPEED_CHANGE_INTERVAL_RHYTHM_3 = 1;\nconst sweptWithRhythm = (delta, speedSpin) => {\n  if (accumulate >= SPEED_CHANGE_INTERVAL_RHYTHM) {\n    if (accumulate_2 >= SPEED_CHANGE_INTERVAL_RHYTHM_2) {\n      if (accumulate_3 >= SPEED_CHANGE_INTERVAL_RHYTHM_3) {\n        accumulate = 0;\n        accumulate_2 = 0;\n        accumulate_3 = 0;\n      } else {\n        targetSpeed = 0;\n        accumulate_3 += delta;\n      }\n    } else {\n      targetSpeed = Math.PI;\n      accumulate_2 += delta;\n    }\n  } else {\n    accumulate += delta;\n    targetSpeed = speedSpin;\n  }\n};\n\nconst reverseWithRhythm = (delta, speedSpin) => {\n  if (accumulate >= SPEED_CHANGE_INTERVAL_RHYTHM) {\n    if (accumulate_2 >= SPEED_CHANGE_INTERVAL_RHYTHM_2) {\n      if (accumulate_3 >= SPEED_CHANGE_INTERVAL_RHYTHM_3) {\n        accumulate = 0;\n        accumulate_2 = 0;\n        accumulate_3 = 0;\n      } else {\n        targetSpeed = 0;\n        accumulate_3 += delta;\n      }\n    } else {\n      targetSpeed = -Math.PI;\n      accumulate_2 += delta;\n    }\n  } else {\n    accumulate += delta;\n    targetSpeed = -speedSpin;\n  }\n};\nlet SPEED_CHANGE_INTERVAL = 0.5;\nlet SPEED_CHANGE_INTERVAL_2 = 1.5;\nconst SPEED_CHANGE_INTERVAL_3 = 0.7;\nconst sweptWithReverse = (delta, speedSpin) => {\n  if (checkDirectionSpin) {\n    if (accumulate >= SPEED_CHANGE_INTERVAL) {\n      if (accumulate_2 >= SPEED_CHANGE_INTERVAL_2) {\n        if (accumulate_3 >= SPEED_CHANGE_INTERVAL_3) {\n          accumulate = 0;\n          accumulate_2 = 0;\n          accumulate_3 = 0;\n          checkDirectionSpin = false;\n          SPEED_CHANGE_INTERVAL = Math.random() * 1 + 1;\n        } else {\n          targetSpeed = 0;\n          accumulate_3 += delta;\n        }\n      } else {\n        targetSpeed = -Math.PI;\n        accumulate_2 += delta;\n      }\n    } else {\n      accumulate += delta;\n      targetSpeed = -speedSpin;\n    }\n  } else {\n    if (accumulate >= SPEED_CHANGE_INTERVAL_RHYTHM) {\n      if (accumulate_2 >= SPEED_CHANGE_INTERVAL_RHYTHM_2) {\n        if (accumulate_3 >= SPEED_CHANGE_INTERVAL_RHYTHM_3) {\n          accumulate = 0;\n          accumulate_2 = 0;\n          accumulate_3 = 0;\n          checkDirectionSpin = true;\n          SPEED_CHANGE_INTERVAL = Math.random() * 1 + 1;\n        } else {\n          targetSpeed = 0;\n          accumulate_3 += delta;\n        }\n      } else {\n        targetSpeed = Math.PI;\n        accumulate_2 += delta;\n      }\n    } else {\n      accumulate += delta;\n      targetSpeed = speedSpin;\n    }\n  }\n};\n\nexport default (delta, randomSpin, speedSpin) => {\n  goalSpeed += (targetSpeed - goalSpeed) * 0.1;\n  goalAngle += goalSpeed * delta;\n  while (goalAngle >= 2 * Math.PI) {\n    goalAngle -= 2 * Math.PI;\n  }\n  while (goalAngle < 0) {\n    goalAngle += 2 * Math.PI;\n  }\n  switch (randomSpin) {\n    case 1:\n      swept(speedSpin);\n      break;\n    case 2:\n      reverse(speedSpin);\n      break;\n    case 3:\n      sweptWithRhythm(delta, speedSpin);\n      break;\n    case 4:\n      reverseWithRhythm(delta, speedSpin);\n      break;\n    case 5:\n      sweptWithReverse(delta, speedSpin);\n      break;\n    default:\n      swept(speedSpin);\n      break;\n  }\n  return { angle: goalAngle, speed: goalSpeed };\n};\n","import { Vector2 } from \"gdxjs/lib\";\nimport processSpinOption from \"./processSpinOption\";\n\nexport const createGoalSpinSystem = () => {\n  let option;\n  let redundantAngle = Math.PI / 60;\n  const tmp = new Vector2();\n  return {\n    update(\n      delta,\n      { goalState, indexOptionGame, knifeHit, optionGame },\n      { worldWidth }\n    ) {\n      option = processSpinOption(\n        delta,\n        optionGame[indexOptionGame].randomSpin,\n        optionGame[indexOptionGame].speedSpin\n      );\n      goalState.angle = option.angle;\n      for (const k of knifeHit) {\n        k.rotateAngle += option.speed * delta;\n        tmp.set(worldWidth / 6, 5.5);\n        tmp.rotateRad(k.rotateAngle);\n        k.tmp2.set(goalState.position.x, goalState.position.y);\n        k.tmp2.addVector(tmp);\n        tmp.set(worldWidth / 2.3, 10);\n        tmp.rotateRad(k.rotateAngle);\n        k.tmp3.set(goalState.position.x, goalState.position.y);\n        k.tmp3.addVector(tmp);\n        tmp.set(worldWidth / 2.3, 5.5);\n        tmp.rotateRad(k.rotateAngle + redundantAngle);\n        k.leftcheck.set(goalState.position.x, goalState.position.y);\n        k.leftcheck.addVector(tmp);\n        tmp.set(worldWidth / 2.3, 10);\n        tmp.rotateRad(k.rotateAngle - redundantAngle - 0.2);\n        k.rightcheck.set(goalState.position.x, goalState.position.y);\n        k.rightcheck.addVector(tmp);\n      }\n    },\n  };\n};\n","export const createGoalDropRenderSystem = () => {\n  let listGoalDrop;\n  return {\n    init({ knifeIndex }, { assets }) {\n      const atlas = assets.atlas;\n      listGoalDrop = atlas.findRegions(\"TN_Piece\");\n    },\n    update(delta, worldState, { batch, camera }) {\n      const {\n        goalDrop,\n        knifeHit,\n        indexOptionGame,\n        optionGame,\n        checkRenderGoalDrop,\n      } = worldState;\n      if (\n        knifeHit.length >= optionGame[indexOptionGame].countShotting &&\n        checkRenderGoalDrop\n      ) {\n        batch.setProjection(camera.combined);\n        batch.begin();\n        for (let i = 0; i < goalDrop.length; i++) {\n          listGoalDrop[i].draw(\n            batch,\n            goalDrop[i].position.x - goalDrop[i].radius / 2,\n            goalDrop[i].position.y - goalDrop[i].radius / 2,\n            goalDrop[i].radius,\n            goalDrop[i].radius\n          );\n        }\n        batch.end();\n      }\n    },\n  };\n};\n","import createRenderPlayScreen from \"../GameScreen\";\n\nexport const createGoalDropPositionSystem = (Game) => {\n  const goToPlayScreen = async (index) =>\n    Game.setCurrentScreen(await createRenderPlayScreen(Game, index));\n  let index = 0;\n  return {\n    update(delta, worldState, { worldWidth }) {\n      const { goalDrop, knifeHit, optionGame, indexOptionGame } = worldState;\n      if (knifeHit.length >= optionGame[indexOptionGame].countShotting) {\n        goalDrop[0].position.x -= delta * goalDrop[0].speed;\n        goalDrop[0].position.y += delta * goalDrop[0].speed;\n        goalDrop[1].position.x -= delta * goalDrop[1].speed;\n        goalDrop[1].position.y -= delta * goalDrop[1].speed;\n        goalDrop[2].position.x += delta * goalDrop[2].speed;\n        goalDrop[2].position.y += delta * goalDrop[2].speed;\n        goalDrop[3].position.x += delta * goalDrop[3].speed;\n        goalDrop[3].position.y -= delta * goalDrop[3].speed;\n        for (const k of goalDrop) {\n          if (k.opacity > 0) {\n            k.opacity -= 0.09;\n          }\n        }\n        worldState.checkRenderGoalDrop = true;\n        if (goalDrop[0].position.x < -10) {\n          index = indexOptionGame + 1;\n          goToPlayScreen(index);\n        }\n      }\n    },\n  };\n};\n","import { Vector2 } from \"gdxjs/lib\";\n\nexport const createKnifePositionSystem = () => {\n  let checkKnifeGoal = false;\n  let isShooting;\n  return {\n    update(delta, worldState, { inputHandler, worldWidth, worldHeight }) {\n      const { knifeState, bullets, knifeHit } = worldState;\n      inputHandler.addEventListener(\"touchStart\", () => {\n        if (\n          !isShooting &&\n          !worldState.checkKnifeDrop &&\n          !worldState.checkRenderGoalDrop\n        ) {\n          isShooting = true;\n        }\n      });\n      if (isShooting) {\n        knifeState.position.y -= delta * knifeState.speedY;\n      }\n      if (knifeState.position.y <= worldHeight / 2.5) {\n        for (let knife of knifeHit) {\n          if (\n            knifeState.position.x + knifeState.width / 2 >= knife.leftcheck.x &&\n            knifeState.position.x - knifeState.width / 2 <=\n              knife.rightcheck.x &&\n            knife.leftcheck.y >= worldHeight / 3\n          ) {\n            checkKnifeGoal = true;\n            worldState.checkKnifeDrop = true;\n            break;\n          }\n        }\n        if (!checkKnifeGoal) {\n          knifeHit.push({\n            tmp2: new Vector2(0, 0),\n            tmp3: new Vector2(0, 0),\n            rightcheck: new Vector2(0, 0),\n            leftcheck: new Vector2(0, 0),\n            rotateAngle: 89.2,\n          });\n          for (let index = 0; index < 15; index++) {\n            bullets.push({\n              position: new Vector2(worldWidth / 2, (worldHeight / 5) * 2),\n              velocity: new Vector2(\n                Math.random() * worldWidth - worldWidth / 2,\n                Math.random() * worldWidth\n              ),\n              radius: Math.random() * 1,\n              speed: 3,\n              lifeSpan: 0,\n              expire: Math.random() * (0.3 - 0.1) + 0.1,\n            });\n          }\n          worldState.vibrateGoal = true;\n\n          worldState.score += 1;\n        }\n        knifeState.position.y = worldHeight;\n        isShooting = false;\n      }\n      if (knifeState.position.y > (worldHeight * 4) / 5 && !isShooting) {\n        knifeState.position.y -= delta * knifeState.speedY;\n        if (knifeState.position.y <= (worldHeight * 4) / 5) {\n          knifeState.position.y = (worldHeight * 4) / 5;\n        }\n      }\n    },\n  };\n};\n","export const createVibrateGoalRenderSystem = () => {\n  let goalWhite;\n  return {\n    init({ knifeIndex }, { assets }) {\n      const atlas = assets.atlas;\n      goalWhite = atlas.findRegion(\"GoalWhite\", -1);\n    },\n    update(delta, { bullets }, { batch, camera }) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      for (const bullet of bullets) {\n        goalWhite.draw(\n          batch,\n          bullet.position.x,\n          bullet.position.y,\n          bullet.radius,\n          bullet.radius,\n          0,\n          0,\n          0\n        );\n      }\n      batch.end();\n    },\n  };\n};\n","export const createVibrateGoalPositionSystem = () => {\n  let timeSpan = 0.034;\n  let currentPositionGoal = 0;\n  return {\n    update(delta, worldState, { inputHandler }) {\n      const { goalState } = worldState;\n      if (worldState.vibrateGoal) {\n        if (currentPositionGoal === 0) {\n          currentPositionGoal = goalState.position.y;\n        }\n\n        if (timeSpan <= 0) {\n          goalState.position.y += delta * 100;\n          if (goalState.position.y >= currentPositionGoal) {\n            goalState.position.y = currentPositionGoal;\n            timeSpan = 0.034;\n            currentPositionGoal = 0;\n            worldState.vibrateGoal = false;\n          }\n        } else {\n          timeSpan -= delta;\n          goalState.position.y -= delta * 100;\n        }\n      }\n    },\n  };\n};\n","import { Vector2 } from \"gdxjs/lib\";\n\nexport const createEffectHitSystem = () => {\n  const tmp = new Vector2();\n  return {\n    update(delta, { bullets }) {\n      for (let i = bullets.length - 1; i >= 0; i--) {\n        tmp.setVector(bullets[i].velocity).scale(delta * bullets[i].speed);\n        bullets[i].position.addVector(tmp);\n        bullets[i].lifeSpan += delta;\n        if (bullets[i].lifeSpan >= bullets[i].expire) {\n          bullets.splice(i, 1);\n        }\n      }\n    },\n  };\n};\n","export const createKnifeHitRenderSystem = () => {\n  let knife;\n  const drawLine = (\n    batch,\n    knife,\n    tmp2,\n    tmp3,\n    thickness = 1,\n    r = 1,\n    g = 1,\n    b = 1,\n    a = 1\n  ) => {\n    const length = tmp2.distance(tmp3);\n    const angle = tmp3.subVector(tmp2).angle();\n    batch.setColor(r, g, b, a);\n    knife.draw(\n      batch,\n      tmp2.x,\n      tmp2.y,\n      thickness,\n      length,\n      0,\n      0,\n      angle - Math.PI / 2\n    );\n    batch.setColor(1, 1, 1, 1);\n  };\n  return {\n    init({ knifeIndex }, { assets }) {\n      const atlas = assets.atlas;\n      const knifes = atlas.findRegions(\n        \"95852d40-981a-48e5-bf16-1d7246f3963f_scaled\"\n      );\n      knife = knifes[knifeIndex];\n    },\n    update(\n      delta,\n      { knifeHit, optionGame, indexOptionGame },\n      { batch, camera }\n    ) {\n      if (knifeHit.length < optionGame[indexOptionGame].countShotting) {\n        batch.setProjection(camera.combined);\n        batch.begin();\n        for (const k of knifeHit) {\n          drawLine(batch, knife, k.tmp2, k.tmp3, 4);\n        }\n        batch.end();\n      }\n    },\n  };\n};\n","import { Vector2 } from \"gdxjs/lib\";\n\nexport const createKnifeDropSystem = () => {\n  const currentPosKnife = new Vector2();\n  return {\n    update(delta, worldState, { worldWidth, worldHeight }) {\n      const { checkKnifeDrop, knifeDrop } = worldState;\n      if (checkKnifeDrop) {\n        currentPosKnife.set(knifeDrop.position.x, knifeDrop.position.y);\n        knifeDrop.position.y +=\n          delta * worldHeight * (knifeDrop.speed / worldHeight);\n        knifeDrop.position.x -= delta * (worldWidth / 2);\n        knifeDrop.rotate -= Math.PI * 4 * delta;\n        if (knifeDrop.position.y > worldHeight) {\n          knifeDrop.position.y = currentPosKnife.y;\n          knifeDrop.position.x = currentPosKnife.x;\n          currentPosKnife.set(0, 0);\n          worldState.checkKnifeDrop = false;\n          worldState.gameOver = true;\n        }\n      }\n    },\n  };\n};\n","export const createKnifeDropRenderSystem = () => {\n  let knife;\n  return {\n    init({ knifeIndex }, { assets }) {\n      const atlas = assets.atlas;\n      const knifes = atlas.findRegions(\n        \"95852d40-981a-48e5-bf16-1d7246f3963f_scaled\"\n      );\n      knife = knifes[knifeIndex];\n    },\n    update(\n      delta,\n      { knifeDrop, knifeState, checkKnifeDrop },\n      { batch, camera }\n    ) {\n      if (checkKnifeDrop) {\n        batch.setProjection(camera.combined);\n        batch.begin();\n        knife.draw(\n          batch,\n          knifeDrop.position.x,\n          knifeDrop.position.y,\n          knifeState.width,\n          knifeState.height,\n          knifeState.width / 2,\n          knifeState.height / 2,\n          knifeDrop.rotate\n        );\n        batch.end();\n      }\n    },\n  };\n};\n","import createWorld from \"./createWorld\";\nimport { Vector2, createViewportAwareInputHandler } from \"gdxjs\";\nimport { createRenderGameOverScreen } from \"./GameOverScreen\";\nimport { createRenderRewardScreen } from \"./renderRewardScreen\";\nimport { createBgRenderSystem } from \"./system/BgRenderSystem\";\nimport { createKnifeRenderSystem } from \"./system/KnifeRenderSystem\";\nimport { createGoalRenderSystem } from \"./system/GoalRenderSystem\";\nimport { createTotalKnifeRenderSystem } from \"./system/TotalKnifeRenderSystem\";\nimport { createGoalSpinSystem } from \"./system/GoalSpinSystem\";\nimport { createGoalDropRenderSystem } from \"./system/GoalDropRenderSystem\";\nimport { createGoalDropPositionSystem } from \"./system/GoalDropPositionSystem\";\nimport { createKnifePositionSystem } from \"./system/KnifePositionSystem\";\nimport { createVibrateGoalRenderSystem } from \"./system/VibrateGoalRenderSystem\";\nimport { createVibrateGoalPositionSystem } from \"./system/VibrateGoalPositionSystem\";\nimport { createEffectHitSystem } from \"./system/EffectHitSystem\";\nimport { createKnifeHitRenderSystem } from \"./system/KnifeHitRenderSystem\";\nimport { createKnifeDropSystem } from \"./system/KnifeDropSystem\";\nimport { createKnifeDropRenderSystem } from \"./system/KnifeDropRenderSystem\";\n\nconst createRenderPlayScreen = (Game, index = 0) => {\n  const {\n    knifeIndex,\n    worldWidth,\n    worldHeight,\n    canvas,\n    gl,\n    batch,\n    camera,\n    whiteTex,\n    viewport,\n    assets,\n  } = Game;\n\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const worldState = {\n    knifeIndex,\n    indexOptionGame: index,\n    win: false,\n    gameOver: false,\n    knifeHit: [],\n    bullets: [],\n    score: 0,\n    vibrateGoal: false,\n    checkKnifeDrop: false,\n    checkRenderGoalDrop: false,\n    totalKnifeState: {\n      position: new Vector2(worldWidth / 10, (worldHeight * 3) / 4),\n      angle: 5.5,\n    },\n    knifeState: {\n      position: new Vector2(worldWidth / 2, (worldHeight * 4) / 5),\n      speedY: worldHeight * 2.5,\n      width: 5,\n      height: 15,\n    },\n    goalState: {\n      position: new Vector2(worldWidth / 2, worldHeight / 3.5),\n      radius: 30,\n      angle: 0,\n    },\n    knifeDrop: {\n      position: new Vector2(worldWidth / 2, (worldHeight / 4.7) * 2),\n      rotate: 0,\n      speed: 100,\n    },\n    goalDrop: [\n      {\n        position: new Vector2(worldWidth / 2, worldHeight / 3.5),\n        radius: 30,\n        opacity: 1,\n        speed: worldWidth * 2,\n      },\n      {\n        position: new Vector2(worldWidth / 2, worldHeight / 3.5),\n        radius: 30,\n        opacity: 1,\n        speed: worldWidth * 2,\n      },\n      {\n        position: new Vector2(worldWidth / 2, worldHeight / 3.5),\n        radius: 30,\n        opacity: 1,\n        speed: worldWidth * 2,\n      },\n      {\n        position: new Vector2(worldWidth / 2, worldHeight / 3.5),\n        radius: 30,\n        opacity: 1,\n        speed: worldWidth * 2,\n      },\n    ],\n    optionGame: [\n      {\n        countShotting: 5,\n        goalKnife: 0,\n        apple: 0,\n        speedSpin: Math.PI,\n        randomSpin: 1,\n      },\n      {\n        countShotting: 7,\n        goalKnife: 1,\n        apple: 0,\n        speedSpin: Math.PI,\n        randomSpin: Math.floor(Math.random() * 1 + 1),\n      },\n      {\n        countShotting: 10,\n        goalKnife: Math.floor(Math.random() * 2 + 2),\n        apple: 0,\n        speedSpin: Math.floor(Math.random() * 3 + 1) * Math.PI,\n        randomSpin: Math.floor(Math.random() * 4 + 2),\n      },\n      {\n        countShotting: 10,\n        goalKnife: Math.floor(Math.random() * 2 + 2),\n        apple: 0,\n        speedSpin: Math.floor(Math.random() * 3 + 1) * Math.PI,\n        randomSpin: Math.floor(Math.random() * 4 + 2),\n      },\n    ],\n  };\n  const extra = {\n    worldWidth,\n    worldHeight,\n    canvas,\n    gl,\n    batch,\n    camera,\n    viewport,\n    inputHandler,\n    whiteTex,\n    assets,\n  };\n  const world = createWorld(worldState, extra);\n  if (index < 4) {\n    world.addSystem(createGoalSpinSystem(), true);\n    world.addSystem(createKnifePositionSystem(), true);\n    world.addSystem(createEffectHitSystem(), true);\n    world.addSystem(createVibrateGoalPositionSystem(), true);\n    world.addSystem(createKnifeDropSystem(), true);\n    world.addSystem(createGoalDropPositionSystem(Game), true);\n\n    world.addSystem(createBgRenderSystem());\n    world.addSystem(createKnifeRenderSystem());\n    world.addSystem(createTotalKnifeRenderSystem());\n    world.addSystem(createKnifeHitRenderSystem());\n    world.addSystem(createGoalRenderSystem());\n    world.addSystem(createVibrateGoalRenderSystem());\n    world.addSystem(createKnifeDropRenderSystem());\n    world.addSystem(createGoalDropRenderSystem());\n    for (let i = 0; i < worldState.optionGame[index].goalKnife; i++) {\n      worldState.knifeHit.push({\n        tmp2: new Vector2(0, 0),\n        tmp3: new Vector2(0, 0),\n        rightcheck: new Vector2(0, 0),\n        leftcheck: new Vector2(0, 0),\n        rotateAngle: 89.2,\n      });\n    }\n  }\n\n  const goToGameOverScreen = async () =>\n    Game.setCurrentScreen(await createRenderGameOverScreen(Game));\n\n  const goToRewardScreen = async () => {\n    Game.setCurrentScreen(await createRenderRewardScreen(Game));\n  };\n\n  let delayStateTime = 0;\n\n  const update = (delta) => {\n    if (index === 4) {\n      delayStateTime += delta;\n      world.update(delta);\n      if (delayStateTime >= 0.5) {\n        goToRewardScreen();\n      }\n    } else {\n      if (!worldState.gameOver) {\n        worldState.stateTime += delta;\n        world.update(delta);\n      } else {\n        goToGameOverScreen();\n      }\n    }\n  };\n  return {\n    update,\n    detroy() {\n      inputHandler.cleanup();\n    },\n  };\n};\nexport default createRenderPlayScreen;\n","import createScreen from \"./utils/createScreen\";\nimport { createViewportAwareInputHandler, Vector2 } from \"gdxjs\";\nimport { checkPointInsideRect } from \"./utils/coordUtil\";\nimport createRenderPlayScreen from \"./GameScreen\";\n\nexport const createRenderChoosingScreen = (Game) => {\n  const goToPlayScreen = async () =>\n    Game.setCurrentScreen(await createRenderPlayScreen(Game));\n  const {\n    worldWidth,\n    worldHeight,\n    assets,\n    canvas,\n    batch,\n    viewport,\n    camera,\n  } = Game;\n  const inputHandler = createViewportAwareInputHandler(canvas, viewport);\n  const atlas = assets.atlas;\n  window.atlas = atlas;\n  const bg = atlas.findRegion(\"dashboard\", -1);\n  const BG_HEIGHT = worldHeight;\n  const BG_WIDTH = worldWidth;\n  const select_knife_btn = atlas.findRegion(\"select-knife-btn\", -1);\n  const SELECT_KNIFE_BTN_WIDTH = 6;\n  const SELECT_KNIFE_BTN_HEIGHT = 5;\n  const start_btn = atlas.findRegion(\"start-btn\", -1);\n  const START_BTN_WIDTH = 14;\n  const START_BTN_HEIGHT = 7;\n  const SELECT_KNIFE_BTN_RECT = [\n    worldWidth / 2 - SELECT_KNIFE_BTN_WIDTH / 2,\n    (worldHeight * 5) / 6,\n    SELECT_KNIFE_BTN_WIDTH,\n    SELECT_KNIFE_BTN_HEIGHT,\n  ];\n  const START_BTN_RECT = [\n    worldWidth / 2 - START_BTN_WIDTH / 2,\n    (worldHeight * 2) / 3,\n    START_BTN_WIDTH,\n    START_BTN_HEIGHT,\n  ];\n  const listKnife = atlas.findRegions(\n    \"95852d40-981a-48e5-bf16-1d7246f3963f_scaled\"\n  );\n  let knifeIndex = 0;\n  let posX = worldWidth / 5;\n  let posX2 = worldWidth / 6;\n  let maxX;\n  let maxX2;\n  let minX;\n  let minX2;\n  let statusListKnife = false;\n  let touchXY = new Vector2(0, 0);\n  inputHandler.addEventListener(\"touchStart\", () => {\n    touchXY = inputHandler.getTouchedWorldCoord();\n    if (checkPointInsideRect(touchXY, SELECT_KNIFE_BTN_RECT)) {\n      statusListKnife ? (statusListKnife = false) : (statusListKnife = true);\n    }\n    if (\n      checkPointInsideRect(touchXY, START_BTN_RECT) &&\n      statusListKnife === false\n    ) {\n      goToPlayScreen();\n    }\n    if (statusListKnife) {\n      minX = worldWidth / 5 + worldWidth / 10;\n      maxX = worldWidth / 5 + worldWidth / 10 + worldWidth / 14;\n      minX2 = worldWidth / 6 + worldWidth / 10;\n      maxX2 = worldWidth / 6 + worldWidth / 10 + worldWidth / 14;\n      for (let i = 0; i < listKnife.length; i++) {\n        if (\n          i < 4 &&\n          touchXY.x >= minX &&\n          touchXY.x <= maxX &&\n          touchXY.y >= worldHeight / 2 - worldHeight / 8 &&\n          touchXY.y <= worldHeight / 2 - worldHeight / 8 + worldHeight / 8\n        ) {\n          Game.knifeIndex = knifeIndex = i;\n          statusListKnife = false;\n          break;\n        } else if (\n          i < 5 &&\n          touchXY.x >= minX2 &&\n          touchXY.x <= maxX2 &&\n          touchXY.y >= worldHeight / 2 + worldHeight / 18 &&\n          touchXY.y <= worldHeight / 2 + worldHeight / 18 + worldHeight / 8\n        ) {\n          Game.knifeIndex = knifeIndex = i + 4;\n          statusListKnife = false;\n          break;\n        }\n        maxX += worldWidth / 10;\n        minX += worldWidth / 10;\n        maxX2 += worldWidth / 10;\n        minX2 += worldWidth / 10;\n      }\n    }\n  });\n\n  return createScreen({\n    update(delta) {\n      batch.setProjection(camera.combined);\n      batch.begin();\n      bg.draw(\n        batch,\n        worldWidth / 2 - BG_WIDTH / 2,\n        worldHeight / 2 - BG_HEIGHT / 2,\n        BG_WIDTH,\n        BG_HEIGHT\n      );\n      select_knife_btn.draw(\n        batch,\n        worldWidth / 2 - SELECT_KNIFE_BTN_WIDTH / 2,\n        (worldHeight * 5) / 6,\n        SELECT_KNIFE_BTN_WIDTH,\n        SELECT_KNIFE_BTN_HEIGHT\n      );\n\n      if (statusListKnife) {\n        posX = worldWidth / 5;\n        posX2 = worldWidth / 6;\n        for (let i = 0; i < listKnife.length; i++) {\n          const knife = listKnife[i];\n          if (i < 4) {\n            knife.draw(\n              batch,\n              (posX += worldWidth / 10),\n              worldHeight / 2 - worldHeight / 8,\n              worldWidth / 14,\n              worldHeight / 8\n            );\n          } else {\n            knife.draw(\n              batch,\n              (posX2 += worldWidth / 10),\n              worldHeight / 2 + worldHeight / 18,\n              worldWidth / 14,\n              worldHeight / 8\n            );\n          }\n        }\n      } else {\n        start_btn.draw(\n          batch,\n          worldWidth / 2 - START_BTN_WIDTH / 2,\n          (worldHeight * 2) / 3,\n          START_BTN_WIDTH,\n          START_BTN_HEIGHT\n        );\n        listKnife[knifeIndex].draw(\n          batch,\n          worldWidth / 2 - 1.5,\n          worldHeight / 2 - 2.5,\n          worldWidth / 14,\n          worldHeight / 8\n        );\n      }\n      batch.end();\n    },\n    detroy() {\n      inputHandler.cleanup();\n    },\n  });\n};\n","import \"./index.css\";\nimport {\n  createGameLoop,\n  createBatch,\n  fillRect,\n  loadAtlas,\n  loadTexture,\n  createViewport,\n} from \"gdxjs\";\nimport createWhiteTex from \"gl-white-texture\";\nimport { createRenderChoosingScreen } from \"./StartScreen\";\nconst init = async () => {\n  const canvas = document.getElementById(\"main\");\n  const info = document.getElementById(\"info\");\n  const [worldWidth, worldHeight] = [47, 100];\n  const viewport = createViewport(canvas, worldWidth, worldHeight);\n  const gl = viewport.getContext();\n  const camera = viewport.getCamera();\n  const batch = createBatch(gl);\n  const whiteTex = createWhiteTex(gl);\n  const Game = {\n    knifeIndex: 0,\n    worldWidth,\n    worldHeight,\n    canvas,\n    gl,\n    batch,\n    camera,\n    viewport,\n    whiteTex,\n    setCurrentScreen(screen) {\n      if (Game.currentScreen) {\n        Game.currentScreen.detroy();\n      }\n      Game.currentScreen = screen;\n    },\n  };\n  const loadingScreen = await loadTexture(gl, \"./assets/loading.jpg\");\n  const L_HEIGHT = worldHeight;\n  const L_WIDTH = (L_HEIGHT * loadingScreen.width) / loadingScreen.height;\n  let count = 0;\n\n  const draw = () => {\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.setColor(1, 1, 1, 1);\n    fillRect(\n      batch,\n      loadingScreen,\n      worldWidth / 2 - L_WIDTH / 2,\n      0,\n      L_WIDTH,\n      L_HEIGHT\n    );\n    fillRect(\n      batch,\n      whiteTex,\n      worldWidth / 2 - worldWidth / (1.45 * 2),\n      (worldHeight * 2.5) / 4 - worldHeight / 50,\n      worldWidth / 1.45,\n      worldHeight / 25\n    );\n    batch.setColor(0, 0, 0, 1);\n    fillRect(\n      batch,\n      whiteTex,\n      worldWidth / 2 - worldWidth / 3,\n      (worldHeight * 2.5) / 4 - worldHeight / 60,\n      worldWidth / 1.5,\n      worldHeight / 30\n    );\n    batch.setColor(1, 1, 1, 1);\n    let ratio = count / 1;\n    fillRect(\n      batch,\n      whiteTex,\n      worldWidth / 2 - worldWidth / (1.55 * 2),\n      (worldHeight * 2.5) / 4 - worldHeight / 80,\n      (worldWidth / 1.55) * ratio,\n      worldHeight / 40\n    );\n    batch.end();\n  };\n\n  const doAndCount = (prosime) =>\n    prosime.then((result) => {\n      draw();\n      count++;\n      return result;\n    });\n  const [atlas, endgame] = await Promise.all([\n    doAndCount(loadAtlas(gl, \"./assets/asset.atlas\")),\n    doAndCount(\n      loadTexture(\n        gl,\n        \"./assets/30415188_209078973189365_5726395929146163200_n.jpg\"\n      )\n    ),\n  ]);\n\n  let assets = {\n    atlas,\n    endgame,\n  };\n\n  Game.assets = assets;\n\n  Game.setCurrentScreen(await createRenderChoosingScreen(Game));\n  gl.clearColor(0, 0, 0, 1);\n  const update = (delta) => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    if (Game.currentScreen) {\n      Game.currentScreen.update(delta);\n    }\n  };\n  const game = createGameLoop(update);\n  setInterval(() => {\n    info.innerHTML = `FPS:${game.getFps()}`;\n  }, 1000);\n};\n\ninit();\n"],"sourceRoot":""}